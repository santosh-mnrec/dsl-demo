//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\temp\Orsted.WindTurbine.DSL\Turbine.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class TurbineLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, CREATE=21, FOUND=22, AND=23, WHERE=24, WITH=25, 
		DATE=26, TIME=27, NUMBER=28, MONTH=29, STRING=30, SEPARATOR=31, STATEMENT_SEP=32, 
		TEXT=33, COLON=34, PARENT=35, CHILD=36, SUBCHILD=37, MULTI_LEVEL=38, WS=39;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "CREATE", "FOUND", "AND", "WHERE", "WITH", 
		"DATE", "TIME", "NUMBER", "MONTH", "STRING", "SEPARATOR", "STATEMENT_SEP", 
		"TEXT", "COLON", "PARENT", "CHILD", "SUBCHILD", "MULTI_LEVEL", "ESC", 
		"UNICODE", "HEX", "SAFECODEPOINT", "WS"
	};


	public TurbineLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TurbineLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'CREATE DEFECT'", "'DESCRIPTION'", "'SITE'", "'POSITION'", "'LOCATION'", 
		"'DETAILS ARE'", "'TYPE'", "'SEVERITY'", "'ACTIONS'", "'COMMENT'", "'UTC'", 
		"'GMT'", "'EST'", "'PST'", "'reported by:'", "'date:'", "'time:'", "'Summary:'", 
		"'+'", "'='", "'Create defect'", "'for site'", "'and'", "'where'", "'details are'", 
		null, null, null, null, null, "'-'", "';;;'", null, "':'", "'#'", "'~'", 
		"'--'", "'---'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "CREATE", "FOUND", 
		"AND", "WHERE", "WITH", "DATE", "TIME", "NUMBER", "MONTH", "STRING", "SEPARATOR", 
		"STATEMENT_SEP", "TEXT", "COLON", "PARENT", "CHILD", "SUBCHILD", "MULTI_LEVEL", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Turbine.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TurbineLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,39,386,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,
		12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
		16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,
		19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
		22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
		24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,
		26,1,27,4,27,289,8,27,11,27,12,27,290,1,28,1,28,1,28,1,28,1,28,1,28,1,
		28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
		28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
		28,1,28,3,28,329,8,28,1,29,1,29,1,29,5,29,334,8,29,10,29,12,29,337,9,29,
		1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,1,32,4,32,348,8,32,11,32,12,32,
		349,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,
		38,1,38,1,38,3,38,368,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,41,
		1,41,1,42,4,42,381,8,42,11,42,12,42,382,1,42,1,42,0,0,43,1,1,3,2,5,3,7,
		4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
		17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
		29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,0,79,0,81,
		0,83,0,85,39,1,0,6,1,0,48,57,3,0,48,57,65,90,97,122,8,0,34,34,47,47,92,
		92,98,98,102,102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,3,0,0,
		31,34,34,92,92,3,0,9,10,13,13,32,32,398,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
		0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
		0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
		0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
		1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,85,1,0,0,0,1,87,1,0,0,0,3,101,1,0,
		0,0,5,113,1,0,0,0,7,118,1,0,0,0,9,127,1,0,0,0,11,136,1,0,0,0,13,148,1,
		0,0,0,15,153,1,0,0,0,17,162,1,0,0,0,19,170,1,0,0,0,21,178,1,0,0,0,23,182,
		1,0,0,0,25,186,1,0,0,0,27,190,1,0,0,0,29,194,1,0,0,0,31,207,1,0,0,0,33,
		213,1,0,0,0,35,219,1,0,0,0,37,228,1,0,0,0,39,230,1,0,0,0,41,232,1,0,0,
		0,43,246,1,0,0,0,45,255,1,0,0,0,47,259,1,0,0,0,49,265,1,0,0,0,51,277,1,
		0,0,0,53,283,1,0,0,0,55,288,1,0,0,0,57,328,1,0,0,0,59,330,1,0,0,0,61,340,
		1,0,0,0,63,342,1,0,0,0,65,347,1,0,0,0,67,351,1,0,0,0,69,353,1,0,0,0,71,
		355,1,0,0,0,73,357,1,0,0,0,75,360,1,0,0,0,77,364,1,0,0,0,79,369,1,0,0,
		0,81,375,1,0,0,0,83,377,1,0,0,0,85,380,1,0,0,0,87,88,5,67,0,0,88,89,5,
		82,0,0,89,90,5,69,0,0,90,91,5,65,0,0,91,92,5,84,0,0,92,93,5,69,0,0,93,
		94,5,32,0,0,94,95,5,68,0,0,95,96,5,69,0,0,96,97,5,70,0,0,97,98,5,69,0,
		0,98,99,5,67,0,0,99,100,5,84,0,0,100,2,1,0,0,0,101,102,5,68,0,0,102,103,
		5,69,0,0,103,104,5,83,0,0,104,105,5,67,0,0,105,106,5,82,0,0,106,107,5,
		73,0,0,107,108,5,80,0,0,108,109,5,84,0,0,109,110,5,73,0,0,110,111,5,79,
		0,0,111,112,5,78,0,0,112,4,1,0,0,0,113,114,5,83,0,0,114,115,5,73,0,0,115,
		116,5,84,0,0,116,117,5,69,0,0,117,6,1,0,0,0,118,119,5,80,0,0,119,120,5,
		79,0,0,120,121,5,83,0,0,121,122,5,73,0,0,122,123,5,84,0,0,123,124,5,73,
		0,0,124,125,5,79,0,0,125,126,5,78,0,0,126,8,1,0,0,0,127,128,5,76,0,0,128,
		129,5,79,0,0,129,130,5,67,0,0,130,131,5,65,0,0,131,132,5,84,0,0,132,133,
		5,73,0,0,133,134,5,79,0,0,134,135,5,78,0,0,135,10,1,0,0,0,136,137,5,68,
		0,0,137,138,5,69,0,0,138,139,5,84,0,0,139,140,5,65,0,0,140,141,5,73,0,
		0,141,142,5,76,0,0,142,143,5,83,0,0,143,144,5,32,0,0,144,145,5,65,0,0,
		145,146,5,82,0,0,146,147,5,69,0,0,147,12,1,0,0,0,148,149,5,84,0,0,149,
		150,5,89,0,0,150,151,5,80,0,0,151,152,5,69,0,0,152,14,1,0,0,0,153,154,
		5,83,0,0,154,155,5,69,0,0,155,156,5,86,0,0,156,157,5,69,0,0,157,158,5,
		82,0,0,158,159,5,73,0,0,159,160,5,84,0,0,160,161,5,89,0,0,161,16,1,0,0,
		0,162,163,5,65,0,0,163,164,5,67,0,0,164,165,5,84,0,0,165,166,5,73,0,0,
		166,167,5,79,0,0,167,168,5,78,0,0,168,169,5,83,0,0,169,18,1,0,0,0,170,
		171,5,67,0,0,171,172,5,79,0,0,172,173,5,77,0,0,173,174,5,77,0,0,174,175,
		5,69,0,0,175,176,5,78,0,0,176,177,5,84,0,0,177,20,1,0,0,0,178,179,5,85,
		0,0,179,180,5,84,0,0,180,181,5,67,0,0,181,22,1,0,0,0,182,183,5,71,0,0,
		183,184,5,77,0,0,184,185,5,84,0,0,185,24,1,0,0,0,186,187,5,69,0,0,187,
		188,5,83,0,0,188,189,5,84,0,0,189,26,1,0,0,0,190,191,5,80,0,0,191,192,
		5,83,0,0,192,193,5,84,0,0,193,28,1,0,0,0,194,195,5,114,0,0,195,196,5,101,
		0,0,196,197,5,112,0,0,197,198,5,111,0,0,198,199,5,114,0,0,199,200,5,116,
		0,0,200,201,5,101,0,0,201,202,5,100,0,0,202,203,5,32,0,0,203,204,5,98,
		0,0,204,205,5,121,0,0,205,206,5,58,0,0,206,30,1,0,0,0,207,208,5,100,0,
		0,208,209,5,97,0,0,209,210,5,116,0,0,210,211,5,101,0,0,211,212,5,58,0,
		0,212,32,1,0,0,0,213,214,5,116,0,0,214,215,5,105,0,0,215,216,5,109,0,0,
		216,217,5,101,0,0,217,218,5,58,0,0,218,34,1,0,0,0,219,220,5,83,0,0,220,
		221,5,117,0,0,221,222,5,109,0,0,222,223,5,109,0,0,223,224,5,97,0,0,224,
		225,5,114,0,0,225,226,5,121,0,0,226,227,5,58,0,0,227,36,1,0,0,0,228,229,
		5,43,0,0,229,38,1,0,0,0,230,231,5,61,0,0,231,40,1,0,0,0,232,233,5,67,0,
		0,233,234,5,114,0,0,234,235,5,101,0,0,235,236,5,97,0,0,236,237,5,116,0,
		0,237,238,5,101,0,0,238,239,5,32,0,0,239,240,5,100,0,0,240,241,5,101,0,
		0,241,242,5,102,0,0,242,243,5,101,0,0,243,244,5,99,0,0,244,245,5,116,0,
		0,245,42,1,0,0,0,246,247,5,102,0,0,247,248,5,111,0,0,248,249,5,114,0,0,
		249,250,5,32,0,0,250,251,5,115,0,0,251,252,5,105,0,0,252,253,5,116,0,0,
		253,254,5,101,0,0,254,44,1,0,0,0,255,256,5,97,0,0,256,257,5,110,0,0,257,
		258,5,100,0,0,258,46,1,0,0,0,259,260,5,119,0,0,260,261,5,104,0,0,261,262,
		5,101,0,0,262,263,5,114,0,0,263,264,5,101,0,0,264,48,1,0,0,0,265,266,5,
		100,0,0,266,267,5,101,0,0,267,268,5,116,0,0,268,269,5,97,0,0,269,270,5,
		105,0,0,270,271,5,108,0,0,271,272,5,115,0,0,272,273,5,32,0,0,273,274,5,
		97,0,0,274,275,5,114,0,0,275,276,5,101,0,0,276,50,1,0,0,0,277,278,3,55,
		27,0,278,279,5,45,0,0,279,280,3,57,28,0,280,281,5,45,0,0,281,282,3,55,
		27,0,282,52,1,0,0,0,283,284,3,55,27,0,284,285,5,58,0,0,285,286,3,55,27,
		0,286,54,1,0,0,0,287,289,7,0,0,0,288,287,1,0,0,0,289,290,1,0,0,0,290,288,
		1,0,0,0,290,291,1,0,0,0,291,56,1,0,0,0,292,293,5,74,0,0,293,294,5,65,0,
		0,294,329,5,78,0,0,295,296,5,70,0,0,296,297,5,69,0,0,297,329,5,66,0,0,
		298,299,5,77,0,0,299,300,5,65,0,0,300,329,5,82,0,0,301,302,5,65,0,0,302,
		303,5,80,0,0,303,329,5,82,0,0,304,305,5,77,0,0,305,306,5,65,0,0,306,329,
		5,89,0,0,307,308,5,74,0,0,308,309,5,85,0,0,309,329,5,78,0,0,310,311,5,
		74,0,0,311,312,5,85,0,0,312,329,5,76,0,0,313,314,5,65,0,0,314,315,5,85,
		0,0,315,329,5,71,0,0,316,317,5,83,0,0,317,318,5,69,0,0,318,329,5,80,0,
		0,319,320,5,79,0,0,320,321,5,67,0,0,321,329,5,84,0,0,322,323,5,78,0,0,
		323,324,5,79,0,0,324,329,5,86,0,0,325,326,5,68,0,0,326,327,5,69,0,0,327,
		329,5,67,0,0,328,292,1,0,0,0,328,295,1,0,0,0,328,298,1,0,0,0,328,301,1,
		0,0,0,328,304,1,0,0,0,328,307,1,0,0,0,328,310,1,0,0,0,328,313,1,0,0,0,
		328,316,1,0,0,0,328,319,1,0,0,0,328,322,1,0,0,0,328,325,1,0,0,0,329,58,
		1,0,0,0,330,335,5,34,0,0,331,334,3,77,38,0,332,334,3,83,41,0,333,331,1,
		0,0,0,333,332,1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,
		336,338,1,0,0,0,337,335,1,0,0,0,338,339,5,34,0,0,339,60,1,0,0,0,340,341,
		5,45,0,0,341,62,1,0,0,0,342,343,5,59,0,0,343,344,5,59,0,0,344,345,5,59,
		0,0,345,64,1,0,0,0,346,348,7,1,0,0,347,346,1,0,0,0,348,349,1,0,0,0,349,
		347,1,0,0,0,349,350,1,0,0,0,350,66,1,0,0,0,351,352,5,58,0,0,352,68,1,0,
		0,0,353,354,5,35,0,0,354,70,1,0,0,0,355,356,5,126,0,0,356,72,1,0,0,0,357,
		358,5,45,0,0,358,359,5,45,0,0,359,74,1,0,0,0,360,361,5,45,0,0,361,362,
		5,45,0,0,362,363,5,45,0,0,363,76,1,0,0,0,364,367,5,92,0,0,365,368,7,2,
		0,0,366,368,3,79,39,0,367,365,1,0,0,0,367,366,1,0,0,0,368,78,1,0,0,0,369,
		370,5,117,0,0,370,371,3,81,40,0,371,372,3,81,40,0,372,373,3,81,40,0,373,
		374,3,81,40,0,374,80,1,0,0,0,375,376,7,3,0,0,376,82,1,0,0,0,377,378,8,
		4,0,0,378,84,1,0,0,0,379,381,7,5,0,0,380,379,1,0,0,0,381,382,1,0,0,0,382,
		380,1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,385,6,42,0,0,385,86,1,
		0,0,0,8,0,290,328,333,335,349,367,382,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
