//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\temp\Orsted.WindTurbine.DSL\Turbine.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class TurbineLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, DATE=20, TIME=21, NUMBER=22, MONTH=23, STRING=24, 
		SEPARATOR=25, TEXT=26, COLON=27, AT_SITE=28, WS=29;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "DATE", "TIME", "NUMBER", "MONTH", "STRING", "SEPARATOR", 
		"TEXT", "COLON", "AT_SITE", "ESC", "UNICODE", "HEX", "SAFECODEPOINT", 
		"WS"
	};


	public TurbineLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TurbineLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'There is a'", "'found at'", "'and'", "'type:'", "'severity:'", 
		"'actions:'", "'comment:'", "'external'", "'internal'", "'UTC'", "'GMT'", 
		"'EST'", "'PST'", "'reported by:'", "'date:'", "'time:'", "'Details:'", 
		"'Summary:'", "'='", null, null, null, null, null, "'-'", null, "':'", 
		"'at site'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "DATE", "TIME", "NUMBER", 
		"MONTH", "STRING", "SEPARATOR", "TEXT", "COLON", "AT_SITE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Turbine.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TurbineLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,29,309,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
		1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
		12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,
		20,1,20,1,20,1,21,4,21,219,8,21,11,21,12,21,220,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,3,22,259,8,22,1,23,1,23,1,23,5,23,264,8,23,10,23,12,
		23,267,9,23,1,23,1,23,1,24,1,24,1,25,4,25,274,8,25,11,25,12,25,275,1,26,
		1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,3,28,291,8,
		28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,4,32,304,8,32,
		11,32,12,32,305,1,32,1,32,0,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
		9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
		21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,0,59,0,61,0,63,0,65,29,
		1,0,6,1,0,48,57,2,0,65,90,97,122,8,0,34,34,47,47,92,92,98,98,102,102,110,
		110,114,114,116,116,3,0,48,57,65,70,97,102,3,0,0,31,34,34,92,92,3,0,9,
		10,13,13,32,32,321,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
		1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
		0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,78,1,0,0,0,5,87,1,0,0,
		0,7,91,1,0,0,0,9,97,1,0,0,0,11,107,1,0,0,0,13,116,1,0,0,0,15,125,1,0,0,
		0,17,134,1,0,0,0,19,143,1,0,0,0,21,147,1,0,0,0,23,151,1,0,0,0,25,155,1,
		0,0,0,27,159,1,0,0,0,29,172,1,0,0,0,31,178,1,0,0,0,33,184,1,0,0,0,35,193,
		1,0,0,0,37,202,1,0,0,0,39,204,1,0,0,0,41,211,1,0,0,0,43,218,1,0,0,0,45,
		258,1,0,0,0,47,260,1,0,0,0,49,270,1,0,0,0,51,273,1,0,0,0,53,277,1,0,0,
		0,55,279,1,0,0,0,57,287,1,0,0,0,59,292,1,0,0,0,61,298,1,0,0,0,63,300,1,
		0,0,0,65,303,1,0,0,0,67,68,5,84,0,0,68,69,5,104,0,0,69,70,5,101,0,0,70,
		71,5,114,0,0,71,72,5,101,0,0,72,73,5,32,0,0,73,74,5,105,0,0,74,75,5,115,
		0,0,75,76,5,32,0,0,76,77,5,97,0,0,77,2,1,0,0,0,78,79,5,102,0,0,79,80,5,
		111,0,0,80,81,5,117,0,0,81,82,5,110,0,0,82,83,5,100,0,0,83,84,5,32,0,0,
		84,85,5,97,0,0,85,86,5,116,0,0,86,4,1,0,0,0,87,88,5,97,0,0,88,89,5,110,
		0,0,89,90,5,100,0,0,90,6,1,0,0,0,91,92,5,116,0,0,92,93,5,121,0,0,93,94,
		5,112,0,0,94,95,5,101,0,0,95,96,5,58,0,0,96,8,1,0,0,0,97,98,5,115,0,0,
		98,99,5,101,0,0,99,100,5,118,0,0,100,101,5,101,0,0,101,102,5,114,0,0,102,
		103,5,105,0,0,103,104,5,116,0,0,104,105,5,121,0,0,105,106,5,58,0,0,106,
		10,1,0,0,0,107,108,5,97,0,0,108,109,5,99,0,0,109,110,5,116,0,0,110,111,
		5,105,0,0,111,112,5,111,0,0,112,113,5,110,0,0,113,114,5,115,0,0,114,115,
		5,58,0,0,115,12,1,0,0,0,116,117,5,99,0,0,117,118,5,111,0,0,118,119,5,109,
		0,0,119,120,5,109,0,0,120,121,5,101,0,0,121,122,5,110,0,0,122,123,5,116,
		0,0,123,124,5,58,0,0,124,14,1,0,0,0,125,126,5,101,0,0,126,127,5,120,0,
		0,127,128,5,116,0,0,128,129,5,101,0,0,129,130,5,114,0,0,130,131,5,110,
		0,0,131,132,5,97,0,0,132,133,5,108,0,0,133,16,1,0,0,0,134,135,5,105,0,
		0,135,136,5,110,0,0,136,137,5,116,0,0,137,138,5,101,0,0,138,139,5,114,
		0,0,139,140,5,110,0,0,140,141,5,97,0,0,141,142,5,108,0,0,142,18,1,0,0,
		0,143,144,5,85,0,0,144,145,5,84,0,0,145,146,5,67,0,0,146,20,1,0,0,0,147,
		148,5,71,0,0,148,149,5,77,0,0,149,150,5,84,0,0,150,22,1,0,0,0,151,152,
		5,69,0,0,152,153,5,83,0,0,153,154,5,84,0,0,154,24,1,0,0,0,155,156,5,80,
		0,0,156,157,5,83,0,0,157,158,5,84,0,0,158,26,1,0,0,0,159,160,5,114,0,0,
		160,161,5,101,0,0,161,162,5,112,0,0,162,163,5,111,0,0,163,164,5,114,0,
		0,164,165,5,116,0,0,165,166,5,101,0,0,166,167,5,100,0,0,167,168,5,32,0,
		0,168,169,5,98,0,0,169,170,5,121,0,0,170,171,5,58,0,0,171,28,1,0,0,0,172,
		173,5,100,0,0,173,174,5,97,0,0,174,175,5,116,0,0,175,176,5,101,0,0,176,
		177,5,58,0,0,177,30,1,0,0,0,178,179,5,116,0,0,179,180,5,105,0,0,180,181,
		5,109,0,0,181,182,5,101,0,0,182,183,5,58,0,0,183,32,1,0,0,0,184,185,5,
		68,0,0,185,186,5,101,0,0,186,187,5,116,0,0,187,188,5,97,0,0,188,189,5,
		105,0,0,189,190,5,108,0,0,190,191,5,115,0,0,191,192,5,58,0,0,192,34,1,
		0,0,0,193,194,5,83,0,0,194,195,5,117,0,0,195,196,5,109,0,0,196,197,5,109,
		0,0,197,198,5,97,0,0,198,199,5,114,0,0,199,200,5,121,0,0,200,201,5,58,
		0,0,201,36,1,0,0,0,202,203,5,61,0,0,203,38,1,0,0,0,204,205,3,43,21,0,205,
		206,3,43,21,0,206,207,3,49,24,0,207,208,3,45,22,0,208,209,3,49,24,0,209,
		210,3,43,21,0,210,40,1,0,0,0,211,212,3,43,21,0,212,213,3,43,21,0,213,214,
		3,53,26,0,214,215,3,43,21,0,215,216,3,43,21,0,216,42,1,0,0,0,217,219,7,
		0,0,0,218,217,1,0,0,0,219,220,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,
		221,44,1,0,0,0,222,223,5,74,0,0,223,224,5,65,0,0,224,259,5,78,0,0,225,
		226,5,70,0,0,226,227,5,69,0,0,227,259,5,66,0,0,228,229,5,77,0,0,229,230,
		5,65,0,0,230,259,5,82,0,0,231,232,5,65,0,0,232,233,5,80,0,0,233,259,5,
		82,0,0,234,235,5,77,0,0,235,236,5,65,0,0,236,259,5,89,0,0,237,238,5,74,
		0,0,238,239,5,85,0,0,239,259,5,78,0,0,240,241,5,74,0,0,241,242,5,85,0,
		0,242,259,5,76,0,0,243,244,5,65,0,0,244,245,5,85,0,0,245,259,5,71,0,0,
		246,247,5,83,0,0,247,248,5,69,0,0,248,259,5,80,0,0,249,250,5,79,0,0,250,
		251,5,67,0,0,251,259,5,84,0,0,252,253,5,78,0,0,253,254,5,79,0,0,254,259,
		5,86,0,0,255,256,5,68,0,0,256,257,5,69,0,0,257,259,5,67,0,0,258,222,1,
		0,0,0,258,225,1,0,0,0,258,228,1,0,0,0,258,231,1,0,0,0,258,234,1,0,0,0,
		258,237,1,0,0,0,258,240,1,0,0,0,258,243,1,0,0,0,258,246,1,0,0,0,258,249,
		1,0,0,0,258,252,1,0,0,0,258,255,1,0,0,0,259,46,1,0,0,0,260,265,5,34,0,
		0,261,264,3,57,28,0,262,264,3,63,31,0,263,261,1,0,0,0,263,262,1,0,0,0,
		264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,268,1,0,0,0,267,265,
		1,0,0,0,268,269,5,34,0,0,269,48,1,0,0,0,270,271,5,45,0,0,271,50,1,0,0,
		0,272,274,7,1,0,0,273,272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,
		276,1,0,0,0,276,52,1,0,0,0,277,278,5,58,0,0,278,54,1,0,0,0,279,280,5,97,
		0,0,280,281,5,116,0,0,281,282,5,32,0,0,282,283,5,115,0,0,283,284,5,105,
		0,0,284,285,5,116,0,0,285,286,5,101,0,0,286,56,1,0,0,0,287,290,5,92,0,
		0,288,291,7,2,0,0,289,291,3,59,29,0,290,288,1,0,0,0,290,289,1,0,0,0,291,
		58,1,0,0,0,292,293,5,117,0,0,293,294,3,61,30,0,294,295,3,61,30,0,295,296,
		3,61,30,0,296,297,3,61,30,0,297,60,1,0,0,0,298,299,7,3,0,0,299,62,1,0,
		0,0,300,301,8,4,0,0,301,64,1,0,0,0,302,304,7,5,0,0,303,302,1,0,0,0,304,
		305,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,308,6,
		32,0,0,308,66,1,0,0,0,8,0,220,258,263,265,275,290,305,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
