//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\temp\Orsted.WindTurbine.DSL\Turbine.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class TurbineParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, CREATE=19, FOUND=20, AND=21, WHERE=22, WITH=23, DATE=24, TIME=25, 
		NUMBER=26, MONTH=27, STRING=28, SEPARATOR=29, STATEMENT_SEP=30, TEXT=31, 
		COLON=32, PARENT=33, CHILD=34, SUBCHILD=35, MULTI_LEVEL=36, WS=37;
	public const int
		RULE_turbine = 0, RULE_section = 1, RULE_defectStatement = 2, RULE_defectBlock = 3, 
		RULE_descriptionProperty = 4, RULE_siteProperty = 5, RULE_positionProperty = 6, 
		RULE_locationProperty = 7, RULE_dateProperty = 8, RULE_timeProperty = 9, 
		RULE_detailsProperty = 10, RULE_detailProperty = 11, RULE_reporterClause = 12, 
		RULE_objectSections = 13, RULE_objectSection = 14, RULE_child = 15, RULE_keyValueSection = 16, 
		RULE_keyValueProperty = 17;
	public static readonly string[] ruleNames = {
		"turbine", "section", "defectStatement", "defectBlock", "descriptionProperty", 
		"siteProperty", "positionProperty", "locationProperty", "dateProperty", 
		"timeProperty", "detailsProperty", "detailProperty", "reporterClause", 
		"objectSections", "objectSection", "child", "keyValueSection", "keyValueProperty"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Create Defect with'", "'{'", "'}'", "'Description'", "'Site'", 
		"'Position'", "'Location'", "'Date'", "'Time'", "'Details:'", "'Type'", 
		"'Severity'", "'Actions'", "'Comment'", "'Failure Mode'", "'Reporter'", 
		"'+'", "'='", "'Create defect'", "'for site'", "'and'", "'where'", "'details are'", 
		null, null, null, null, null, "'-'", "';;;'", null, "':'", "'#'", "'~'", 
		"'--'", "'---'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "CREATE", "FOUND", "AND", "WHERE", 
		"WITH", "DATE", "TIME", "NUMBER", "MONTH", "STRING", "SEPARATOR", "STATEMENT_SEP", 
		"TEXT", "COLON", "PARENT", "CHILD", "SUBCHILD", "MULTI_LEVEL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Turbine.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TurbineParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TurbineParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TurbineParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TurbineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SectionContext[] section() {
			return GetRuleContexts<SectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SectionContext section(int i) {
			return GetRuleContext<SectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATEMENT_SEP() { return GetTokens(TurbineParser.STATEMENT_SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENT_SEP(int i) {
			return GetToken(TurbineParser.STATEMENT_SEP, i);
		}
		public TurbineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turbine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterTurbine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitTurbine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTurbine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TurbineContext turbine() {
		TurbineContext _localctx = new TurbineContext(Context, State);
		EnterRule(_localctx, 0, RULE_turbine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			section();
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STATEMENT_SEP) {
				{
				{
				State = 37;
				Match(STATEMENT_SEP);
				State = 38;
				section();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefectStatementContext defectStatement() {
			return GetRuleContext<DefectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValueSectionContext keyValueSection() {
			return GetRuleContext<KeyValueSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectSectionsContext objectSections() {
			return GetRuleContext<ObjectSectionsContext>(0);
		}
		public SectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionContext section() {
		SectionContext _localctx = new SectionContext(Context, State);
		EnterRule(_localctx, 2, RULE_section);
		int _la;
		try {
			State = 49;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 44;
				defectStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__16 || _la==TEXT) {
					{
					State = 45;
					keyValueSection();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 48;
				objectSections();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefectBlockContext defectBlock() {
			return GetRuleContext<DefectBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(TurbineParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReporterClauseContext reporterClause() {
			return GetRuleContext<ReporterClauseContext>(0);
		}
		public DefectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDefectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDefectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefectStatementContext defectStatement() {
		DefectStatementContext _localctx = new DefectStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_defectStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(T__0);
			State = 52;
			defectBlock();
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 53;
				Match(WHERE);
				State = 54;
				reporterClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefectBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionPropertyContext[] descriptionProperty() {
			return GetRuleContexts<DescriptionPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionPropertyContext descriptionProperty(int i) {
			return GetRuleContext<DescriptionPropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SitePropertyContext[] siteProperty() {
			return GetRuleContexts<SitePropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SitePropertyContext siteProperty(int i) {
			return GetRuleContext<SitePropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionPropertyContext[] positionProperty() {
			return GetRuleContexts<PositionPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionPropertyContext positionProperty(int i) {
			return GetRuleContext<PositionPropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocationPropertyContext[] locationProperty() {
			return GetRuleContexts<LocationPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocationPropertyContext locationProperty(int i) {
			return GetRuleContext<LocationPropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatePropertyContext[] dateProperty() {
			return GetRuleContexts<DatePropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatePropertyContext dateProperty(int i) {
			return GetRuleContext<DatePropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimePropertyContext[] timeProperty() {
			return GetRuleContexts<TimePropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimePropertyContext timeProperty(int i) {
			return GetRuleContext<TimePropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DetailsPropertyContext[] detailsProperty() {
			return GetRuleContexts<DetailsPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DetailsPropertyContext detailsProperty(int i) {
			return GetRuleContext<DetailsPropertyContext>(i);
		}
		public DefectBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defectBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDefectBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDefectBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefectBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefectBlockContext defectBlock() {
		DefectBlockContext _localctx = new DefectBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_defectBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			Match(T__1);
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 2032L) != 0) {
				{
				State = 65;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__3:
					{
					State = 58;
					descriptionProperty();
					}
					break;
				case T__4:
					{
					State = 59;
					siteProperty();
					}
					break;
				case T__5:
					{
					State = 60;
					positionProperty();
					}
					break;
				case T__6:
					{
					State = 61;
					locationProperty();
					}
					break;
				case T__7:
					{
					State = 62;
					dateProperty();
					}
					break;
				case T__8:
					{
					State = 63;
					timeProperty();
					}
					break;
				case T__9:
					{
					State = 64;
					detailsProperty();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 70;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public DescriptionPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descriptionProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDescriptionProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDescriptionProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescriptionProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionPropertyContext descriptionProperty() {
		DescriptionPropertyContext _localctx = new DescriptionPropertyContext(Context, State);
		EnterRule(_localctx, 8, RULE_descriptionProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(T__3);
			State = 73;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SitePropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public SitePropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_siteProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterSiteProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitSiteProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSiteProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SitePropertyContext siteProperty() {
		SitePropertyContext _localctx = new SitePropertyContext(Context, State);
		EnterRule(_localctx, 10, RULE_siteProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(T__4);
			State = 76;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public PositionPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterPositionProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitPositionProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionPropertyContext positionProperty() {
		PositionPropertyContext _localctx = new PositionPropertyContext(Context, State);
		EnterRule(_localctx, 12, RULE_positionProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(T__5);
			State = 79;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public LocationPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locationProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterLocationProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitLocationProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocationProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationPropertyContext locationProperty() {
		LocationPropertyContext _localctx = new LocationPropertyContext(Context, State);
		EnterRule(_localctx, 14, RULE_locationProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(T__6);
			State = 82;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatePropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public DatePropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDateProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDateProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatePropertyContext dateProperty() {
		DatePropertyContext _localctx = new DatePropertyContext(Context, State);
		EnterRule(_localctx, 16, RULE_dateProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(T__7);
			State = 85;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimePropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public TimePropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterTimeProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitTimeProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimePropertyContext timeProperty() {
		TimePropertyContext _localctx = new TimePropertyContext(Context, State);
		EnterRule(_localctx, 18, RULE_timeProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(T__8);
			State = 88;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DetailPropertyContext[] detailProperty() {
			return GetRuleContexts<DetailPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DetailPropertyContext detailProperty(int i) {
			return GetRuleContext<DetailPropertyContext>(i);
		}
		public DetailsPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailsProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDetailsProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDetailsProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetailsProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DetailsPropertyContext detailsProperty() {
		DetailsPropertyContext _localctx = new DetailsPropertyContext(Context, State);
		EnterRule(_localctx, 20, RULE_detailsProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(T__9);
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 91;
				detailProperty();
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 63488L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TurbineParser.NUMBER, 0); }
		public DetailPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDetailProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDetailProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetailProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DetailPropertyContext detailProperty() {
		DetailPropertyContext _localctx = new DetailPropertyContext(Context, State);
		EnterRule(_localctx, 22, RULE_detailProperty);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				Match(T__10);
				State = 97;
				Match(STRING);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				Match(T__11);
				State = 99;
				Match(NUMBER);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 3);
				{
				State = 100;
				Match(T__12);
				State = 101;
				Match(STRING);
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 4);
				{
				State = 102;
				Match(T__13);
				State = 103;
				Match(STRING);
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 5);
				{
				State = 104;
				Match(T__14);
				State = 105;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReporterClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public ReporterClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reporterClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterReporterClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitReporterClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReporterClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReporterClauseContext reporterClause() {
		ReporterClauseContext _localctx = new ReporterClauseContext(Context, State);
		EnterRule(_localctx, 24, RULE_reporterClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(T__15);
			State = 109;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectSectionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectSectionContext[] objectSection() {
			return GetRuleContexts<ObjectSectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectSectionContext objectSection(int i) {
			return GetRuleContext<ObjectSectionContext>(i);
		}
		public ObjectSectionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectSections; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterObjectSections(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitObjectSections(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectSections(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectSectionsContext objectSections() {
		ObjectSectionsContext _localctx = new ObjectSectionsContext(Context, State);
		EnterRule(_localctx, 26, RULE_objectSections);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PARENT) {
				{
				{
				State = 111;
				objectSection();
				}
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENT() { return GetToken(TurbineParser.PARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePropertyContext[] keyValueProperty() {
			return GetRuleContexts<KeyValuePropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePropertyContext keyValueProperty(int i) {
			return GetRuleContext<KeyValuePropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChildContext[] child() {
			return GetRuleContexts<ChildContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChildContext child(int i) {
			return GetRuleContext<ChildContext>(i);
		}
		public ObjectSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterObjectSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitObjectSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectSectionContext objectSection() {
		ObjectSectionContext _localctx = new ObjectSectionContext(Context, State);
		EnterRule(_localctx, 28, RULE_objectSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(PARENT);
			State = 118;
			Match(TEXT);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 36507353088L) != 0) {
				{
				State = 121;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__16:
				case TEXT:
					{
					State = 119;
					keyValueProperty();
					}
					break;
				case SUBCHILD:
					{
					State = 120;
					child();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChildContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCHILD() { return GetToken(TurbineParser.SUBCHILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePropertyContext[] keyValueProperty() {
			return GetRuleContexts<KeyValuePropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePropertyContext keyValueProperty(int i) {
			return GetRuleContext<KeyValuePropertyContext>(i);
		}
		public ChildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_child; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterChild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitChild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChild(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChildContext child() {
		ChildContext _localctx = new ChildContext(Context, State);
		EnterRule(_localctx, 30, RULE_child);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(SUBCHILD);
			State = 127;
			Match(TEXT);
			State = 131;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 128;
					keyValueProperty();
					}
					} 
				}
				State = 133;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValueSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePropertyContext[] keyValueProperty() {
			return GetRuleContexts<KeyValuePropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePropertyContext keyValueProperty(int i) {
			return GetRuleContext<KeyValuePropertyContext>(i);
		}
		public KeyValueSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValueSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterKeyValueSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitKeyValueSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValueSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValueSectionContext keyValueSection() {
		KeyValueSectionContext _localctx = new KeyValueSectionContext(Context, State);
		EnterRule(_localctx, 32, RULE_keyValueSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 134;
				keyValueProperty();
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__16 || _la==TEXT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(TurbineParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(TurbineParser.TEXT, i);
		}
		public KeyValuePropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValueProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterKeyValueProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitKeyValueProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValueProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePropertyContext keyValueProperty() {
		KeyValuePropertyContext _localctx = new KeyValuePropertyContext(Context, State);
		EnterRule(_localctx, 34, RULE_keyValueProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 139;
				Match(T__16);
				}
			}

			State = 142;
			Match(TEXT);
			State = 143;
			Match(T__17);
			State = 144;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,37,147,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,5,0,40,8,0,10,0,12,0,43,9,0,
		1,1,1,1,3,1,47,8,1,1,1,3,1,50,8,1,1,2,1,2,1,2,1,2,3,2,56,8,2,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,5,3,66,8,3,10,3,12,3,69,9,3,1,3,1,3,1,4,1,4,1,4,
		1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,
		4,10,93,8,10,11,10,12,10,94,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,3,11,107,8,11,1,12,1,12,1,12,1,13,5,13,113,8,13,10,13,12,13,116,
		9,13,1,14,1,14,1,14,1,14,5,14,122,8,14,10,14,12,14,125,9,14,1,15,1,15,
		1,15,5,15,130,8,15,10,15,12,15,133,9,15,1,16,4,16,136,8,16,11,16,12,16,
		137,1,17,3,17,141,8,17,1,17,1,17,1,17,1,17,1,17,0,0,18,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,0,0,151,0,36,1,0,0,0,2,49,1,0,0,0,4,51,
		1,0,0,0,6,57,1,0,0,0,8,72,1,0,0,0,10,75,1,0,0,0,12,78,1,0,0,0,14,81,1,
		0,0,0,16,84,1,0,0,0,18,87,1,0,0,0,20,90,1,0,0,0,22,106,1,0,0,0,24,108,
		1,0,0,0,26,114,1,0,0,0,28,117,1,0,0,0,30,126,1,0,0,0,32,135,1,0,0,0,34,
		140,1,0,0,0,36,41,3,2,1,0,37,38,5,30,0,0,38,40,3,2,1,0,39,37,1,0,0,0,40,
		43,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,1,1,0,0,0,43,41,1,0,0,0,44,50,
		3,4,2,0,45,47,3,32,16,0,46,45,1,0,0,0,46,47,1,0,0,0,47,50,1,0,0,0,48,50,
		3,26,13,0,49,44,1,0,0,0,49,46,1,0,0,0,49,48,1,0,0,0,50,3,1,0,0,0,51,52,
		5,1,0,0,52,55,3,6,3,0,53,54,5,22,0,0,54,56,3,24,12,0,55,53,1,0,0,0,55,
		56,1,0,0,0,56,5,1,0,0,0,57,67,5,2,0,0,58,66,3,8,4,0,59,66,3,10,5,0,60,
		66,3,12,6,0,61,66,3,14,7,0,62,66,3,16,8,0,63,66,3,18,9,0,64,66,3,20,10,
		0,65,58,1,0,0,0,65,59,1,0,0,0,65,60,1,0,0,0,65,61,1,0,0,0,65,62,1,0,0,
		0,65,63,1,0,0,0,65,64,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,
		0,68,70,1,0,0,0,69,67,1,0,0,0,70,71,5,3,0,0,71,7,1,0,0,0,72,73,5,4,0,0,
		73,74,5,28,0,0,74,9,1,0,0,0,75,76,5,5,0,0,76,77,5,28,0,0,77,11,1,0,0,0,
		78,79,5,6,0,0,79,80,5,28,0,0,80,13,1,0,0,0,81,82,5,7,0,0,82,83,5,28,0,
		0,83,15,1,0,0,0,84,85,5,8,0,0,85,86,5,28,0,0,86,17,1,0,0,0,87,88,5,9,0,
		0,88,89,5,28,0,0,89,19,1,0,0,0,90,92,5,10,0,0,91,93,3,22,11,0,92,91,1,
		0,0,0,93,94,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,21,1,0,0,0,96,97,5,
		11,0,0,97,107,5,28,0,0,98,99,5,12,0,0,99,107,5,26,0,0,100,101,5,13,0,0,
		101,107,5,28,0,0,102,103,5,14,0,0,103,107,5,28,0,0,104,105,5,15,0,0,105,
		107,5,28,0,0,106,96,1,0,0,0,106,98,1,0,0,0,106,100,1,0,0,0,106,102,1,0,
		0,0,106,104,1,0,0,0,107,23,1,0,0,0,108,109,5,16,0,0,109,110,5,28,0,0,110,
		25,1,0,0,0,111,113,3,28,14,0,112,111,1,0,0,0,113,116,1,0,0,0,114,112,1,
		0,0,0,114,115,1,0,0,0,115,27,1,0,0,0,116,114,1,0,0,0,117,118,5,33,0,0,
		118,123,5,31,0,0,119,122,3,34,17,0,120,122,3,30,15,0,121,119,1,0,0,0,121,
		120,1,0,0,0,122,125,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,29,1,0,
		0,0,125,123,1,0,0,0,126,127,5,35,0,0,127,131,5,31,0,0,128,130,3,34,17,
		0,129,128,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,
		31,1,0,0,0,133,131,1,0,0,0,134,136,3,34,17,0,135,134,1,0,0,0,136,137,1,
		0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,33,1,0,0,0,139,141,5,17,0,0,
		140,139,1,0,0,0,140,141,1,0,0,0,141,142,1,0,0,0,142,143,5,31,0,0,143,144,
		5,18,0,0,144,145,5,31,0,0,145,35,1,0,0,0,14,41,46,49,55,65,67,94,106,114,
		121,123,131,137,140
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
