//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\temp\Orsted.WindTurbine.DSL\Turbine.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class TurbineParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, CREATE=20, FOUND=21, AND=22, NAME=23, WHERE=24, WITH=25, 
		DATE=26, TIME=27, NUMBER=28, MONTH=29, STRING=30, SEPARATOR=31, STATEMENT_SEP=32, 
		TEXT=33, COLON=34, MULTI_LEVEL=35, SEP=36, WS=37;
	public const int
		RULE_turbine = 0, RULE_section = 1, RULE_defectSection = 2, RULE_defectDescription = 3, 
		RULE_siteDefect = 4, RULE_positionDefect = 5, RULE_locationDefect = 6, 
		RULE_detailsSection = 7, RULE_detail = 8, RULE_timezone = 9, RULE_reporterSection = 10, 
		RULE_summarySection = 11, RULE_keyValueSection = 12, RULE_keyValueProperty = 13, 
		RULE_objectSections = 14, RULE_prop = 15, RULE_key = 16;
	public static readonly string[] ruleNames = {
		"turbine", "section", "defectSection", "defectDescription", "siteDefect", 
		"positionDefect", "locationDefect", "detailsSection", "detail", "timezone", 
		"reporterSection", "summarySection", "keyValueSection", "keyValueProperty", 
		"objectSections", "prop", "key"
	};

	private static readonly string[] _LiteralNames = {
		null, "'CREATE DEFECT'", "'DESCRIPTION'", "'SITE'", "'POSITION'", "'LOCATION'", 
		"'DETAILS ARE'", "'TYPE'", "'SEVERITY'", "'ACTIONS'", "'COMMENT'", "'UTC'", 
		"'GMT'", "'EST'", "'PST'", "'reported by:'", "'date:'", "'time:'", "'Summary:'", 
		"'='", "'Create defect'", "'for site'", "'and'", null, "'where'", "'details are'", 
		null, null, null, null, null, "'-'", "';;;'", null, "':'", "'---'", "'--'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "CREATE", "FOUND", "AND", 
		"NAME", "WHERE", "WITH", "DATE", "TIME", "NUMBER", "MONTH", "STRING", 
		"SEPARATOR", "STATEMENT_SEP", "TEXT", "COLON", "MULTI_LEVEL", "SEP", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Turbine.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TurbineParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TurbineParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TurbineParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TurbineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SectionContext[] section() {
			return GetRuleContexts<SectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SectionContext section(int i) {
			return GetRuleContext<SectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATEMENT_SEP() { return GetTokens(TurbineParser.STATEMENT_SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENT_SEP(int i) {
			return GetToken(TurbineParser.STATEMENT_SEP, i);
		}
		public TurbineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turbine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterTurbine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitTurbine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTurbine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TurbineContext turbine() {
		TurbineContext _localctx = new TurbineContext(Context, State);
		EnterRule(_localctx, 0, RULE_turbine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			section();
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STATEMENT_SEP) {
				{
				{
				State = 35;
				Match(STATEMENT_SEP);
				State = 36;
				section();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefectSectionContext defectSection() {
			return GetRuleContext<DefectSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReporterSectionContext reporterSection() {
			return GetRuleContext<ReporterSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DetailsSectionContext detailsSection() {
			return GetRuleContext<DetailsSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummarySectionContext summarySection() {
			return GetRuleContext<SummarySectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValueSectionContext keyValueSection() {
			return GetRuleContext<KeyValueSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectSectionsContext objectSections() {
			return GetRuleContext<ObjectSectionsContext>(0);
		}
		public SectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionContext section() {
		SectionContext _localctx = new SectionContext(Context, State);
		EnterRule(_localctx, 2, RULE_section);
		try {
			State = 48;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				defectSection();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43;
				reporterSection();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 44;
				detailsSection();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 4);
				{
				State = 45;
				summarySection();
				}
				break;
			case TEXT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 46;
				keyValueSection();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 6);
				{
				State = 47;
				objectSections();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefectSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefectDescriptionContext defectDescription() {
			return GetRuleContext<DefectDescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SiteDefectContext siteDefect() {
			return GetRuleContext<SiteDefectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionDefectContext positionDefect() {
			return GetRuleContext<PositionDefectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocationDefectContext locationDefect() {
			return GetRuleContext<LocationDefectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DetailsSectionContext detailsSection() {
			return GetRuleContext<DetailsSectionContext>(0);
		}
		public DefectSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defectSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDefectSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDefectSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefectSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefectSectionContext defectSection() {
		DefectSectionContext _localctx = new DefectSectionContext(Context, State);
		EnterRule(_localctx, 4, RULE_defectSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(T__0);
			State = 51;
			defectDescription();
			State = 52;
			siteDefect();
			State = 53;
			positionDefect();
			State = 54;
			locationDefect();
			State = 55;
			detailsSection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefectDescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public DefectDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defectDescription; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDefectDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDefectDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefectDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefectDescriptionContext defectDescription() {
		DefectDescriptionContext _localctx = new DefectDescriptionContext(Context, State);
		EnterRule(_localctx, 6, RULE_defectDescription);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			Match(T__1);
			State = 58;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SiteDefectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		public SiteDefectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_siteDefect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterSiteDefect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitSiteDefect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSiteDefect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SiteDefectContext siteDefect() {
		SiteDefectContext _localctx = new SiteDefectContext(Context, State);
		EnterRule(_localctx, 8, RULE_siteDefect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(T__2);
			State = 61;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionDefectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		public PositionDefectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positionDefect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterPositionDefect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitPositionDefect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionDefect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionDefectContext positionDefect() {
		PositionDefectContext _localctx = new PositionDefectContext(Context, State);
		EnterRule(_localctx, 10, RULE_positionDefect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(T__3);
			State = 64;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationDefectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		public LocationDefectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locationDefect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterLocationDefect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitLocationDefect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocationDefect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationDefectContext locationDefect() {
		LocationDefectContext _localctx = new LocationDefectContext(Context, State);
		EnterRule(_localctx, 12, RULE_locationDefect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(T__4);
			State = 67;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DetailContext[] detail() {
			return GetRuleContexts<DetailContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DetailContext detail(int i) {
			return GetRuleContext<DetailContext>(i);
		}
		public DetailsSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailsSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDetailsSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDetailsSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetailsSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DetailsSectionContext detailsSection() {
		DetailsSectionContext _localctx = new DetailsSectionContext(Context, State);
		EnterRule(_localctx, 14, RULE_detailsSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(T__5);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 70;
				detail();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public DetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDetail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDetail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DetailContext detail() {
		DetailContext _localctx = new DetailContext(Context, State);
		EnterRule(_localctx, 16, RULE_detail);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 75;
				Match(T__6);
				State = 76;
				Match(TEXT);
				}
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 77;
				Match(T__7);
				State = 78;
				Match(TEXT);
				}
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 79;
				Match(T__8);
				State = 80;
				Match(TEXT);
				}
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 81;
				Match(T__9);
				State = 82;
				Match(STRING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimezoneContext : ParserRuleContext {
		public TimezoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timezone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterTimezone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitTimezone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimezone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimezoneContext timezone() {
		TimezoneContext _localctx = new TimezoneContext(Context, State);
		EnterRule(_localctx, 18, RULE_timezone);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 30720L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReporterSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(TurbineParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(TurbineParser.TIME, 0); }
		public ReporterSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reporterSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterReporterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitReporterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReporterSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReporterSectionContext reporterSection() {
		ReporterSectionContext _localctx = new ReporterSectionContext(Context, State);
		EnterRule(_localctx, 20, RULE_reporterSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(T__14);
			State = 88;
			Match(STRING);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 89;
				Match(T__15);
				State = 90;
				Match(DATE);
				}
			}

			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 93;
				Match(T__16);
				State = 94;
				Match(TIME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SummarySectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public SummarySectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_summarySection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterSummarySection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitSummarySection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSummarySection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SummarySectionContext summarySection() {
		SummarySectionContext _localctx = new SummarySectionContext(Context, State);
		EnterRule(_localctx, 22, RULE_summarySection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(T__17);
			State = 98;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValueSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePropertyContext[] keyValueProperty() {
			return GetRuleContexts<KeyValuePropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePropertyContext keyValueProperty(int i) {
			return GetRuleContext<KeyValuePropertyContext>(i);
		}
		public KeyValueSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValueSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterKeyValueSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitKeyValueSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValueSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValueSectionContext keyValueSection() {
		KeyValueSectionContext _localctx = new KeyValueSectionContext(Context, State);
		EnterRule(_localctx, 24, RULE_keyValueSection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 100;
					keyValueProperty();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(TurbineParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(TurbineParser.TEXT, i);
		}
		public KeyValuePropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValueProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterKeyValueProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitKeyValueProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValueProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePropertyContext keyValueProperty() {
		KeyValuePropertyContext _localctx = new KeyValuePropertyContext(Context, State);
		EnterRule(_localctx, 26, RULE_keyValueProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(TEXT);
			State = 106;
			Match(T__18);
			State = 107;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectSectionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(TurbineParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropContext[] prop() {
			return GetRuleContexts<PropContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropContext prop(int i) {
			return GetRuleContext<PropContext>(i);
		}
		public ObjectSectionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectSections; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterObjectSections(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitObjectSections(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectSections(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectSectionsContext objectSections() {
		ObjectSectionsContext _localctx = new ObjectSectionsContext(Context, State);
		EnterRule(_localctx, 28, RULE_objectSections);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(NAME);
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTI_LEVEL) {
				{
				{
				State = 110;
				prop();
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LEVEL() { return GetToken(TurbineParser.MULTI_LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyContext[] key() {
			return GetRuleContexts<KeyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyContext key(int i) {
			return GetRuleContext<KeyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValueSectionContext[] keyValueSection() {
			return GetRuleContexts<KeyValueSectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValueSectionContext keyValueSection(int i) {
			return GetRuleContext<KeyValueSectionContext>(i);
		}
		public PropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterProp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitProp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropContext prop() {
		PropContext _localctx = new PropContext(Context, State);
		EnterRule(_localctx, 30, RULE_prop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(MULTI_LEVEL);
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT) {
				{
				State = 119;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 117;
					key();
					}
					break;
				case 2:
					{
					State = 118;
					keyValueSection();
					}
					break;
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(TurbineParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(TurbineParser.TEXT, i);
		}
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 32, RULE_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(TEXT);
			State = 125;
			Match(T__18);
			State = 126;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,37,129,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,1,0,1,0,5,0,38,8,0,10,0,12,0,41,9,0,1,1,1,1,1,
		1,1,1,1,1,1,1,3,1,49,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,
		4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,4,7,72,8,7,11,7,12,7,73,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,3,8,84,8,8,1,9,1,9,1,10,1,10,1,10,1,10,3,10,92,
		8,10,1,10,1,10,3,10,96,8,10,1,11,1,11,1,11,1,12,4,12,102,8,12,11,12,12,
		12,103,1,13,1,13,1,13,1,13,1,14,1,14,5,14,112,8,14,10,14,12,14,115,9,14,
		1,15,1,15,1,15,5,15,120,8,15,10,15,12,15,123,9,15,1,16,1,16,1,16,1,16,
		1,16,0,0,17,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,0,1,1,0,11,14,
		127,0,34,1,0,0,0,2,48,1,0,0,0,4,50,1,0,0,0,6,57,1,0,0,0,8,60,1,0,0,0,10,
		63,1,0,0,0,12,66,1,0,0,0,14,69,1,0,0,0,16,83,1,0,0,0,18,85,1,0,0,0,20,
		87,1,0,0,0,22,97,1,0,0,0,24,101,1,0,0,0,26,105,1,0,0,0,28,109,1,0,0,0,
		30,116,1,0,0,0,32,124,1,0,0,0,34,39,3,2,1,0,35,36,5,32,0,0,36,38,3,2,1,
		0,37,35,1,0,0,0,38,41,1,0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,1,1,0,0,0,
		41,39,1,0,0,0,42,49,3,4,2,0,43,49,3,20,10,0,44,49,3,14,7,0,45,49,3,22,
		11,0,46,49,3,24,12,0,47,49,3,28,14,0,48,42,1,0,0,0,48,43,1,0,0,0,48,44,
		1,0,0,0,48,45,1,0,0,0,48,46,1,0,0,0,48,47,1,0,0,0,49,3,1,0,0,0,50,51,5,
		1,0,0,51,52,3,6,3,0,52,53,3,8,4,0,53,54,3,10,5,0,54,55,3,12,6,0,55,56,
		3,14,7,0,56,5,1,0,0,0,57,58,5,2,0,0,58,59,5,30,0,0,59,7,1,0,0,0,60,61,
		5,3,0,0,61,62,5,33,0,0,62,9,1,0,0,0,63,64,5,4,0,0,64,65,5,33,0,0,65,11,
		1,0,0,0,66,67,5,5,0,0,67,68,5,33,0,0,68,13,1,0,0,0,69,71,5,6,0,0,70,72,
		3,16,8,0,71,70,1,0,0,0,72,73,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,15,
		1,0,0,0,75,76,5,7,0,0,76,84,5,33,0,0,77,78,5,8,0,0,78,84,5,33,0,0,79,80,
		5,9,0,0,80,84,5,33,0,0,81,82,5,10,0,0,82,84,5,30,0,0,83,75,1,0,0,0,83,
		77,1,0,0,0,83,79,1,0,0,0,83,81,1,0,0,0,84,17,1,0,0,0,85,86,7,0,0,0,86,
		19,1,0,0,0,87,88,5,15,0,0,88,91,5,30,0,0,89,90,5,16,0,0,90,92,5,26,0,0,
		91,89,1,0,0,0,91,92,1,0,0,0,92,95,1,0,0,0,93,94,5,17,0,0,94,96,5,27,0,
		0,95,93,1,0,0,0,95,96,1,0,0,0,96,21,1,0,0,0,97,98,5,18,0,0,98,99,5,30,
		0,0,99,23,1,0,0,0,100,102,3,26,13,0,101,100,1,0,0,0,102,103,1,0,0,0,103,
		101,1,0,0,0,103,104,1,0,0,0,104,25,1,0,0,0,105,106,5,33,0,0,106,107,5,
		19,0,0,107,108,5,33,0,0,108,27,1,0,0,0,109,113,5,23,0,0,110,112,3,30,15,
		0,111,110,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,
		29,1,0,0,0,115,113,1,0,0,0,116,121,5,35,0,0,117,120,3,32,16,0,118,120,
		3,24,12,0,119,117,1,0,0,0,119,118,1,0,0,0,120,123,1,0,0,0,121,119,1,0,
		0,0,121,122,1,0,0,0,122,31,1,0,0,0,123,121,1,0,0,0,124,125,5,33,0,0,125,
		126,5,19,0,0,126,127,5,33,0,0,127,33,1,0,0,0,10,39,48,73,83,91,95,103,
		113,119,121
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
