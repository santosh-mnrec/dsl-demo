//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\temp\Orsted.WindTurbine.DSL\Turbine.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class TurbineParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, NESTED=20, SEP=21, NAME=22, DATE=23, TIME=24, NUMBER=25, 
		MONTH=26, STRING=27, SEPARATOR=28, STATEMENT_SEP=29, TEXT=30, COLON=31, 
		AT_SITE=32, WS=33;
	public const int
		RULE_turbine = 0, RULE_section = 1, RULE_rootSection = 2, RULE_nested = 3, 
		RULE_key = 4, RULE_defectSection = 5, RULE_defectDescription = 6, RULE_defectProperties = 7, 
		RULE_defectProperty = 8, RULE_defectType = 9, RULE_severity = 10, RULE_actions = 11, 
		RULE_comment = 12, RULE_location = 13, RULE_site = 14, RULE_position = 15, 
		RULE_timezone = 16, RULE_reporterSection = 17, RULE_detailsSection = 18, 
		RULE_summarySection = 19, RULE_keyValueSection = 20, RULE_keyValueProperty = 21;
	public static readonly string[] ruleNames = {
		"turbine", "section", "rootSection", "nested", "key", "defectSection", 
		"defectDescription", "defectProperties", "defectProperty", "defectType", 
		"severity", "actions", "comment", "location", "site", "position", "timezone", 
		"reporterSection", "detailsSection", "summarySection", "keyValueSection", 
		"keyValueProperty"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'There is a'", "'found at'", "'and'", "'type:'", "'severity:'", 
		"'actions:'", "'comment:'", "'external'", "'internal'", "'UTC'", "'GMT'", 
		"'EST'", "'PST'", "'reported by:'", "'date:'", "'time:'", "'Details:'", 
		"'Summary:'", "'---'", "'--'", null, null, null, null, null, null, "'-'", 
		"';;;'", null, "':'", "'at site'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "NESTED", "SEP", "NAME", 
		"DATE", "TIME", "NUMBER", "MONTH", "STRING", "SEPARATOR", "STATEMENT_SEP", 
		"TEXT", "COLON", "AT_SITE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Turbine.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TurbineParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TurbineParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TurbineParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TurbineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SectionContext[] section() {
			return GetRuleContexts<SectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SectionContext section(int i) {
			return GetRuleContext<SectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TurbineParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATEMENT_SEP() { return GetTokens(TurbineParser.STATEMENT_SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENT_SEP(int i) {
			return GetToken(TurbineParser.STATEMENT_SEP, i);
		}
		public TurbineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turbine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterTurbine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitTurbine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTurbine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TurbineContext turbine() {
		TurbineContext _localctx = new TurbineContext(Context, State);
		EnterRule(_localctx, 0, RULE_turbine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			section();
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STATEMENT_SEP) {
				{
				{
				State = 45;
				Match(STATEMENT_SEP);
				State = 46;
				section();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefectSectionContext defectSection() {
			return GetRuleContext<DefectSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReporterSectionContext reporterSection() {
			return GetRuleContext<ReporterSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DetailsSectionContext detailsSection() {
			return GetRuleContext<DetailsSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummarySectionContext summarySection() {
			return GetRuleContext<SummarySectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValueSectionContext keyValueSection() {
			return GetRuleContext<KeyValueSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RootSectionContext rootSection() {
			return GetRuleContext<RootSectionContext>(0);
		}
		public SectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionContext section() {
		SectionContext _localctx = new SectionContext(Context, State);
		EnterRule(_localctx, 2, RULE_section);
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				defectSection();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55;
				reporterSection();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 3);
				{
				State = 56;
				detailsSection();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 4);
				{
				State = 57;
				summarySection();
				}
				break;
			case TEXT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 58;
				keyValueSection();
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 6);
				{
				State = 59;
				rootSection();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(TurbineParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestedContext[] nested() {
			return GetRuleContexts<NestedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedContext nested(int i) {
			return GetRuleContext<NestedContext>(i);
		}
		public RootSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterRootSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitRootSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootSectionContext rootSection() {
		RootSectionContext _localctx = new RootSectionContext(Context, State);
		EnterRule(_localctx, 4, RULE_rootSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(NAME);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NESTED) {
				{
				{
				State = 63;
				nested();
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED() { return GetToken(TurbineParser.NESTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyContext[] key() {
			return GetRuleContexts<KeyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyContext key(int i) {
			return GetRuleContext<KeyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValueSectionContext[] keyValueSection() {
			return GetRuleContexts<KeyValueSectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValueSectionContext keyValueSection(int i) {
			return GetRuleContext<KeyValueSectionContext>(i);
		}
		public NestedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nested; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNested(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedContext nested() {
		NestedContext _localctx = new NestedContext(Context, State);
		EnterRule(_localctx, 6, RULE_nested);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(NESTED);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT) {
				{
				State = 72;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 70;
					key();
					}
					break;
				case 2:
					{
					State = 71;
					keyValueSection();
					}
					break;
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(TurbineParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(TurbineParser.TEXT, i);
		}
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 8, RULE_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(TEXT);
			State = 78;
			Match(T__0);
			State = 79;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefectSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefectDescriptionContext defectDescription() {
			return GetRuleContext<DefectDescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SiteContext[] site() {
			return GetRuleContexts<SiteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SiteContext site(int i) {
			return GetRuleContext<SiteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PositionContext position() {
			return GetRuleContext<PositionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocationContext location() {
			return GetRuleContext<LocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefectPropertiesContext defectProperties() {
			return GetRuleContext<DefectPropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SITE() { return GetToken(TurbineParser.AT_SITE, 0); }
		public DefectSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defectSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDefectSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDefectSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefectSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefectSectionContext defectSection() {
		DefectSectionContext _localctx = new DefectSectionContext(Context, State);
		EnterRule(_localctx, 10, RULE_defectSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(T__1);
			State = 82;
			defectDescription();
			State = 83;
			Match(T__2);
			State = 84;
			site();
			State = 85;
			Match(T__3);
			State = 86;
			position();
			State = 87;
			location();
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_SITE) {
				{
				State = 88;
				Match(AT_SITE);
				State = 89;
				site();
				}
			}

			State = 92;
			defectProperties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefectDescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		public DefectDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defectDescription; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDefectDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDefectDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefectDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefectDescriptionContext defectDescription() {
		DefectDescriptionContext _localctx = new DefectDescriptionContext(Context, State);
		EnterRule(_localctx, 12, RULE_defectDescription);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefectPropertiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefectPropertyContext[] defectProperty() {
			return GetRuleContexts<DefectPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefectPropertyContext defectProperty(int i) {
			return GetRuleContext<DefectPropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR() { return GetTokens(TurbineParser.SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR(int i) {
			return GetToken(TurbineParser.SEPARATOR, i);
		}
		public DefectPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defectProperties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDefectProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDefectProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefectProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefectPropertiesContext defectProperties() {
		DefectPropertiesContext _localctx = new DefectPropertiesContext(Context, State);
		EnterRule(_localctx, 14, RULE_defectProperties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 268435936L) != 0) {
				{
				State = 98;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
				case T__5:
				case T__6:
				case T__7:
					{
					State = 96;
					defectProperty();
					}
					break;
				case SEPARATOR:
					{
					State = 97;
					Match(SEPARATOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefectPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefectTypeContext defectType() {
			return GetRuleContext<DefectTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeverityContext severity() {
			return GetRuleContext<SeverityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionsContext actions() {
			return GetRuleContext<ActionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public DefectPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defectProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDefectProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDefectProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefectProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefectPropertyContext defectProperty() {
		DefectPropertyContext _localctx = new DefectPropertyContext(Context, State);
		EnterRule(_localctx, 16, RULE_defectProperty);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103;
				defectType();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 104;
				severity();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 105;
				actions();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 4);
				{
				State = 106;
				comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefectTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public DefectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defectType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDefectType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDefectType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefectTypeContext defectType() {
		DefectTypeContext _localctx = new DefectTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_defectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(T__4);
			State = 110;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeverityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public SeverityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_severity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterSeverity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitSeverity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeverity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeverityContext severity() {
		SeverityContext _localctx = new SeverityContext(Context, State);
		EnterRule(_localctx, 20, RULE_severity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(T__5);
			State = 113;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		public ActionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterActions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitActions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionsContext actions() {
		ActionsContext _localctx = new ActionsContext(Context, State);
		EnterRule(_localctx, 22, RULE_actions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(T__6);
			State = 116;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 24, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(T__7);
			State = 119;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationContext : ParserRuleContext {
		public LocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_location; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationContext location() {
		LocationContext _localctx = new LocationContext(Context, State);
		EnterRule(_localctx, 26, RULE_location);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SiteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TurbineParser.NUMBER, 0); }
		public SiteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_site; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterSite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitSite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SiteContext site() {
		SiteContext _localctx = new SiteContext(Context, State);
		EnterRule(_localctx, 28, RULE_site);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(TEXT);
			State = 124;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PositionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		public PositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_position; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterPosition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitPosition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PositionContext position() {
		PositionContext _localctx = new PositionContext(Context, State);
		EnterRule(_localctx, 30, RULE_position);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimezoneContext : ParserRuleContext {
		public TimezoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timezone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterTimezone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitTimezone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimezone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimezoneContext timezone() {
		TimezoneContext _localctx = new TimezoneContext(Context, State);
		EnterRule(_localctx, 32, RULE_timezone);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 30720L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReporterSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(TurbineParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(TurbineParser.TIME, 0); }
		public ReporterSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reporterSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterReporterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitReporterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReporterSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReporterSectionContext reporterSection() {
		ReporterSectionContext _localctx = new ReporterSectionContext(Context, State);
		EnterRule(_localctx, 34, RULE_reporterSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(T__14);
			State = 131;
			Match(STRING);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 132;
				Match(T__15);
				State = 133;
				Match(DATE);
				}
			}

			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 136;
				Match(T__16);
				State = 137;
				Match(TIME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public DetailsSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailsSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDetailsSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDetailsSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetailsSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DetailsSectionContext detailsSection() {
		DetailsSectionContext _localctx = new DetailsSectionContext(Context, State);
		EnterRule(_localctx, 36, RULE_detailsSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(T__17);
			State = 141;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SummarySectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public SummarySectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_summarySection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterSummarySection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitSummarySection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSummarySection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SummarySectionContext summarySection() {
		SummarySectionContext _localctx = new SummarySectionContext(Context, State);
		EnterRule(_localctx, 38, RULE_summarySection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(T__18);
			State = 144;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValueSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePropertyContext[] keyValueProperty() {
			return GetRuleContexts<KeyValuePropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePropertyContext keyValueProperty(int i) {
			return GetRuleContext<KeyValuePropertyContext>(i);
		}
		public KeyValueSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValueSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterKeyValueSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitKeyValueSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValueSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValueSectionContext keyValueSection() {
		KeyValueSectionContext _localctx = new KeyValueSectionContext(Context, State);
		EnterRule(_localctx, 40, RULE_keyValueSection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 146;
					keyValueProperty();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(TurbineParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(TurbineParser.TEXT, i);
		}
		public KeyValuePropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValueProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterKeyValueProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitKeyValueProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValueProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePropertyContext keyValueProperty() {
		KeyValuePropertyContext _localctx = new KeyValuePropertyContext(Context, State);
		EnterRule(_localctx, 42, RULE_keyValueProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(TEXT);
			State = 152;
			Match(T__0);
			State = 153;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,33,156,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,1,0,1,0,5,0,48,8,0,10,0,12,0,51,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
		1,3,1,61,8,1,1,2,1,2,5,2,65,8,2,10,2,12,2,68,9,2,1,3,1,3,1,3,5,3,73,8,
		3,10,3,12,3,76,9,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		3,5,91,8,5,1,5,1,5,1,6,1,6,1,7,1,7,5,7,99,8,7,10,7,12,7,102,9,7,1,8,1,
		8,1,8,1,8,3,8,108,8,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,
		12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,
		17,3,17,135,8,17,1,17,1,17,3,17,139,8,17,1,18,1,18,1,18,1,19,1,19,1,19,
		1,20,4,20,148,8,20,11,20,12,20,149,1,21,1,21,1,21,1,21,1,21,0,0,22,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,0,3,2,0,27,27,
		30,30,1,0,9,10,1,0,11,14,151,0,44,1,0,0,0,2,60,1,0,0,0,4,62,1,0,0,0,6,
		69,1,0,0,0,8,77,1,0,0,0,10,81,1,0,0,0,12,94,1,0,0,0,14,100,1,0,0,0,16,
		107,1,0,0,0,18,109,1,0,0,0,20,112,1,0,0,0,22,115,1,0,0,0,24,118,1,0,0,
		0,26,121,1,0,0,0,28,123,1,0,0,0,30,126,1,0,0,0,32,128,1,0,0,0,34,130,1,
		0,0,0,36,140,1,0,0,0,38,143,1,0,0,0,40,147,1,0,0,0,42,151,1,0,0,0,44,49,
		3,2,1,0,45,46,5,29,0,0,46,48,3,2,1,0,47,45,1,0,0,0,48,51,1,0,0,0,49,47,
		1,0,0,0,49,50,1,0,0,0,50,52,1,0,0,0,51,49,1,0,0,0,52,53,5,0,0,1,53,1,1,
		0,0,0,54,61,3,10,5,0,55,61,3,34,17,0,56,61,3,36,18,0,57,61,3,38,19,0,58,
		61,3,40,20,0,59,61,3,4,2,0,60,54,1,0,0,0,60,55,1,0,0,0,60,56,1,0,0,0,60,
		57,1,0,0,0,60,58,1,0,0,0,60,59,1,0,0,0,61,3,1,0,0,0,62,66,5,22,0,0,63,
		65,3,6,3,0,64,63,1,0,0,0,65,68,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,
		5,1,0,0,0,68,66,1,0,0,0,69,74,5,20,0,0,70,73,3,8,4,0,71,73,3,40,20,0,72,
		70,1,0,0,0,72,71,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,
		7,1,0,0,0,76,74,1,0,0,0,77,78,5,30,0,0,78,79,5,1,0,0,79,80,5,30,0,0,80,
		9,1,0,0,0,81,82,5,2,0,0,82,83,3,12,6,0,83,84,5,3,0,0,84,85,3,28,14,0,85,
		86,5,4,0,0,86,87,3,30,15,0,87,90,3,26,13,0,88,89,5,32,0,0,89,91,3,28,14,
		0,90,88,1,0,0,0,90,91,1,0,0,0,91,92,1,0,0,0,92,93,3,14,7,0,93,11,1,0,0,
		0,94,95,5,30,0,0,95,13,1,0,0,0,96,99,3,16,8,0,97,99,5,28,0,0,98,96,1,0,
		0,0,98,97,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,15,
		1,0,0,0,102,100,1,0,0,0,103,108,3,18,9,0,104,108,3,20,10,0,105,108,3,22,
		11,0,106,108,3,24,12,0,107,103,1,0,0,0,107,104,1,0,0,0,107,105,1,0,0,0,
		107,106,1,0,0,0,108,17,1,0,0,0,109,110,5,5,0,0,110,111,7,0,0,0,111,19,
		1,0,0,0,112,113,5,6,0,0,113,114,7,0,0,0,114,21,1,0,0,0,115,116,5,7,0,0,
		116,117,5,30,0,0,117,23,1,0,0,0,118,119,5,8,0,0,119,120,5,27,0,0,120,25,
		1,0,0,0,121,122,7,1,0,0,122,27,1,0,0,0,123,124,5,30,0,0,124,125,5,25,0,
		0,125,29,1,0,0,0,126,127,5,30,0,0,127,31,1,0,0,0,128,129,7,2,0,0,129,33,
		1,0,0,0,130,131,5,15,0,0,131,134,5,27,0,0,132,133,5,16,0,0,133,135,5,23,
		0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,138,1,0,0,0,136,137,5,17,0,0,137,
		139,5,24,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,35,1,0,0,0,140,141,5,
		18,0,0,141,142,5,27,0,0,142,37,1,0,0,0,143,144,5,19,0,0,144,145,5,27,0,
		0,145,39,1,0,0,0,146,148,3,42,21,0,147,146,1,0,0,0,148,149,1,0,0,0,149,
		147,1,0,0,0,149,150,1,0,0,0,150,41,1,0,0,0,151,152,5,30,0,0,152,153,5,
		1,0,0,153,154,5,30,0,0,154,43,1,0,0,0,12,49,60,66,72,74,90,98,100,107,
		134,138,149
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
