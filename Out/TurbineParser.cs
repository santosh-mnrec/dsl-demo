//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\temp\Orsted.WindTurbine.DSL\Turbine.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class TurbineParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		YEAR=18, MONTH=19, THERE_IS_A=20, FOUND_ON=21, AT_SITE=22, AT_DATE=23, 
		AT_TIME=24, SEPARATOR=25, COLON=26, TEXT=27, STRING=28, DATE=29, TIME=30, 
		JAN=31, FEB=32, MAR=33, APR=34, MAY=35, JUN=36, JUL=37, AUG=38, SEP=39, 
		OCT=40, NOV=41, DEC=42, NUMBER=43, WS=44;
	public const int
		RULE_turbine = 0, RULE_defect = 1, RULE_defectType = 2, RULE_severity = 3, 
		RULE_actions = 4, RULE_comment = 5, RULE_location = 6, RULE_site = 7, 
		RULE_postition = 8, RULE_timezone = 9, RULE_reporter = 10, RULE_details = 11, 
		RULE_summary = 12;
	public static readonly string[] ruleNames = {
		"turbine", "defect", "defectType", "severity", "actions", "comment", "location", 
		"site", "postition", "timezone", "reporter", "details", "summary"
	};

	private static readonly string[] _LiteralNames = {
		null, "'found at'", "'and'", "'type:'", "'severity:'", "'actions:'", "'comment:'", 
		"'external'", "'internal'", "'UTC'", "'GMT'", "'EST'", "'PST'", "'reported by:'", 
		"'date:'", "'time:'", "'Details:'", "'Summary:'", null, null, "'There is a'", 
		"'found on'", "'at site'", "'at date'", "'at time'", "'-'", "':'", null, 
		null, null, null, "'JAN'", "'FEB'", "'MAR'", "'APR'", "'MAY'", "'JUN'", 
		"'JUL'", "'AUG'", "'SEP'", "'OCT'", "'NOV'", "'DEC'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "YEAR", "MONTH", "THERE_IS_A", "FOUND_ON", 
		"AT_SITE", "AT_DATE", "AT_TIME", "SEPARATOR", "COLON", "TEXT", "STRING", 
		"DATE", "TIME", "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", 
		"SEP", "OCT", "NOV", "DEC", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Turbine.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TurbineParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TurbineParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TurbineParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TurbineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefectContext[] defect() {
			return GetRuleContexts<DefectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefectContext defect(int i) {
			return GetRuleContext<DefectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReporterContext reporter() {
			return GetRuleContext<ReporterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DetailsContext details() {
			return GetRuleContext<DetailsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SummaryContext summary() {
			return GetRuleContext<SummaryContext>(0);
		}
		public TurbineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turbine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterTurbine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitTurbine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTurbine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TurbineContext turbine() {
		TurbineContext _localctx = new TurbineContext(Context, State);
		EnterRule(_localctx, 0, RULE_turbine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==THERE_IS_A) {
				{
				{
				State = 26;
				defect();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 32;
				reporter();
				}
			}

			State = 37;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				{
				State = 35;
				details();
				}
				break;
			case T__16:
				{
				State = 36;
				summary();
				}
				break;
			case Eof:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THERE_IS_A() { return GetToken(TurbineParser.THERE_IS_A, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SiteContext[] site() {
			return GetRuleContexts<SiteContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SiteContext site(int i) {
			return GetRuleContext<SiteContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostitionContext postition() {
			return GetRuleContext<PostitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocationContext location() {
			return GetRuleContext<LocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SITE() { return GetToken(TurbineParser.AT_SITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefectTypeContext defectType() {
			return GetRuleContext<DefectTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeverityContext severity() {
			return GetRuleContext<SeverityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionsContext actions() {
			return GetRuleContext<ActionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public DefectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDefect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDefect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefectContext defect() {
		DefectContext _localctx = new DefectContext(Context, State);
		EnterRule(_localctx, 2, RULE_defect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			Match(THERE_IS_A);
			State = 40;
			Match(TEXT);
			State = 41;
			Match(T__0);
			State = 42;
			site();
			State = 43;
			Match(T__1);
			State = 44;
			postition();
			State = 45;
			location();
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_SITE) {
				{
				State = 46;
				Match(AT_SITE);
				State = 47;
				site();
				}
			}

			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 50;
				defectType();
				}
			}

			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 53;
				severity();
				}
			}

			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 56;
				actions();
				}
			}

			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 59;
				comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefectTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public DefectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defectType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDefectType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDefectType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefectType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefectTypeContext defectType() {
		DefectTypeContext _localctx = new DefectTypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_defectType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(T__2);
			State = 63;
			_la = TokenStream.LA(1);
			if ( !(_la==TEXT || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeverityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public SeverityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_severity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterSeverity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitSeverity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeverity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeverityContext severity() {
		SeverityContext _localctx = new SeverityContext(Context, State);
		EnterRule(_localctx, 6, RULE_severity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(T__3);
			State = 66;
			_la = TokenStream.LA(1);
			if ( !(_la==TEXT || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		public ActionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterActions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitActions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionsContext actions() {
		ActionsContext _localctx = new ActionsContext(Context, State);
		EnterRule(_localctx, 8, RULE_actions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(T__4);
			State = 69;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 10, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(T__5);
			State = 72;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(TurbineParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(TurbineParser.TEXT, i);
		}
		public LocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_location; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationContext location() {
		LocationContext _localctx = new LocationContext(Context, State);
		EnterRule(_localctx, 12, RULE_location);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT) {
				{
				{
				State = 75;
				Match(TEXT);
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SiteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TurbineParser.NUMBER, 0); }
		public SiteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_site; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterSite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitSite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SiteContext site() {
		SiteContext _localctx = new SiteContext(Context, State);
		EnterRule(_localctx, 14, RULE_site);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(TEXT);
			State = 82;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		public PostitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterPostition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitPostition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostitionContext postition() {
		PostitionContext _localctx = new PostitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_postition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimezoneContext : ParserRuleContext {
		public TimezoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timezone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterTimezone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitTimezone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimezone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimezoneContext timezone() {
		TimezoneContext _localctx = new TimezoneContext(Context, State);
		EnterRule(_localctx, 18, RULE_timezone);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 7680L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReporterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(TurbineParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(TurbineParser.TIME, 0); }
		public ReporterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reporter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterReporter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitReporter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReporter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReporterContext reporter() {
		ReporterContext _localctx = new ReporterContext(Context, State);
		EnterRule(_localctx, 20, RULE_reporter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(T__12);
			State = 89;
			Match(STRING);
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 90;
				Match(T__13);
				State = 91;
				Match(DATE);
				}
			}

			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 94;
				Match(T__14);
				State = 95;
				Match(TIME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public DetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_details; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDetails(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDetails(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DetailsContext details() {
		DetailsContext _localctx = new DetailsContext(Context, State);
		EnterRule(_localctx, 22, RULE_details);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(T__15);
			State = 99;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SummaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		public SummaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_summary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterSummary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitSummary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSummary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SummaryContext summary() {
		SummaryContext _localctx = new SummaryContext(Context, State);
		EnterRule(_localctx, 24, RULE_summary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(T__16);
			State = 102;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,44,105,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,5,0,28,8,0,10,0,
		12,0,31,9,0,1,0,3,0,34,8,0,1,0,1,0,3,0,38,8,0,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,3,1,49,8,1,1,1,3,1,52,8,1,1,1,3,1,55,8,1,1,1,3,1,58,8,1,1,
		1,3,1,61,8,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,5,
		6,77,8,6,10,6,12,6,80,9,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,
		10,3,10,93,8,10,1,10,1,10,3,10,97,8,10,1,11,1,11,1,11,1,12,1,12,1,12,1,
		12,0,0,13,0,2,4,6,8,10,12,14,16,18,20,22,24,0,3,1,0,27,28,1,0,7,8,1,0,
		9,12,103,0,29,1,0,0,0,2,39,1,0,0,0,4,62,1,0,0,0,6,65,1,0,0,0,8,68,1,0,
		0,0,10,71,1,0,0,0,12,74,1,0,0,0,14,81,1,0,0,0,16,84,1,0,0,0,18,86,1,0,
		0,0,20,88,1,0,0,0,22,98,1,0,0,0,24,101,1,0,0,0,26,28,3,2,1,0,27,26,1,0,
		0,0,28,31,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,33,1,0,0,0,31,29,1,0,
		0,0,32,34,3,20,10,0,33,32,1,0,0,0,33,34,1,0,0,0,34,37,1,0,0,0,35,38,3,
		22,11,0,36,38,3,24,12,0,37,35,1,0,0,0,37,36,1,0,0,0,37,38,1,0,0,0,38,1,
		1,0,0,0,39,40,5,20,0,0,40,41,5,27,0,0,41,42,5,1,0,0,42,43,3,14,7,0,43,
		44,5,2,0,0,44,45,3,16,8,0,45,48,3,12,6,0,46,47,5,22,0,0,47,49,3,14,7,0,
		48,46,1,0,0,0,48,49,1,0,0,0,49,51,1,0,0,0,50,52,3,4,2,0,51,50,1,0,0,0,
		51,52,1,0,0,0,52,54,1,0,0,0,53,55,3,6,3,0,54,53,1,0,0,0,54,55,1,0,0,0,
		55,57,1,0,0,0,56,58,3,8,4,0,57,56,1,0,0,0,57,58,1,0,0,0,58,60,1,0,0,0,
		59,61,3,10,5,0,60,59,1,0,0,0,60,61,1,0,0,0,61,3,1,0,0,0,62,63,5,3,0,0,
		63,64,7,0,0,0,64,5,1,0,0,0,65,66,5,4,0,0,66,67,7,0,0,0,67,7,1,0,0,0,68,
		69,5,5,0,0,69,70,5,27,0,0,70,9,1,0,0,0,71,72,5,6,0,0,72,73,5,28,0,0,73,
		11,1,0,0,0,74,78,7,1,0,0,75,77,5,27,0,0,76,75,1,0,0,0,77,80,1,0,0,0,78,
		76,1,0,0,0,78,79,1,0,0,0,79,13,1,0,0,0,80,78,1,0,0,0,81,82,5,27,0,0,82,
		83,5,43,0,0,83,15,1,0,0,0,84,85,5,27,0,0,85,17,1,0,0,0,86,87,7,2,0,0,87,
		19,1,0,0,0,88,89,5,13,0,0,89,92,5,28,0,0,90,91,5,14,0,0,91,93,5,29,0,0,
		92,90,1,0,0,0,92,93,1,0,0,0,93,96,1,0,0,0,94,95,5,15,0,0,95,97,5,30,0,
		0,96,94,1,0,0,0,96,97,1,0,0,0,97,21,1,0,0,0,98,99,5,16,0,0,99,100,5,28,
		0,0,100,23,1,0,0,0,101,102,5,17,0,0,102,103,5,28,0,0,103,25,1,0,0,0,11,
		29,33,37,48,51,54,57,60,78,92,96
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
