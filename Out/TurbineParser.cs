//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\temp\Orsted.WindTurbine.DSL\Turbine.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class TurbineParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, STRING=8, NUMBER=9, 
		DATE=10, TIME=11, SEPARATOR=12, COLON=13, TEXT=14, MONTH=15, WS=16;
	public const int
		RULE_turbine = 0, RULE_defect = 1, RULE_defectDescription = 2, RULE_defectDetails = 3, 
		RULE_detailSection = 4, RULE_keyValuePair = 5, RULE_key = 6, RULE_value = 7, 
		RULE_sitePosition = 8;
	public static readonly string[] ruleNames = {
		"turbine", "defect", "defectDescription", "defectDetails", "detailSection", 
		"keyValuePair", "key", "value", "sitePosition"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Defect:'", "'at'", "'{'", "'}'", "'SITE'", "','", "'Position'", 
		null, null, null, null, "'-'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "STRING", "NUMBER", "DATE", 
		"TIME", "SEPARATOR", "COLON", "TEXT", "MONTH", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Turbine.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TurbineParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TurbineParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TurbineParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TurbineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefectContext[] defect() {
			return GetRuleContexts<DefectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefectContext defect(int i) {
			return GetRuleContext<DefectContext>(i);
		}
		public TurbineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turbine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterTurbine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitTurbine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTurbine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TurbineContext turbine() {
		TurbineContext _localctx = new TurbineContext(Context, State);
		EnterRule(_localctx, 0, RULE_turbine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 18;
				defect();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefectDescriptionContext defectDescription() {
			return GetRuleContext<DefectDescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefectDetailsContext defectDetails() {
			return GetRuleContext<DefectDetailsContext>(0);
		}
		public DefectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDefect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDefect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefectContext defect() {
		DefectContext _localctx = new DefectContext(Context, State);
		EnterRule(_localctx, 2, RULE_defect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			Match(T__0);
			State = 25;
			defectDescription();
			State = 26;
			defectDetails();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefectDescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SitePositionContext sitePosition() {
			return GetRuleContext<SitePositionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		public DefectDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defectDescription; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDefectDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDefectDescription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefectDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefectDescriptionContext defectDescription() {
		DefectDescriptionContext _localctx = new DefectDescriptionContext(Context, State);
		EnterRule(_localctx, 4, RULE_defectDescription);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 29;
			Match(T__1);
			State = 30;
			sitePosition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefectDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DetailSectionContext[] detailSection() {
			return GetRuleContexts<DetailSectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DetailSectionContext detailSection(int i) {
			return GetRuleContext<DetailSectionContext>(i);
		}
		public DefectDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defectDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDefectDetails(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDefectDetails(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefectDetails(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefectDetailsContext defectDetails() {
		DefectDetailsContext _localctx = new DefectDetailsContext(Context, State);
		EnterRule(_localctx, 6, RULE_defectDetails);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			Match(T__2);
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT) {
				{
				{
				State = 33;
				detailSection();
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 39;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DetailSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePairContext keyValuePair() {
			return GetRuleContext<KeyValuePairContext>(0);
		}
		public DetailSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detailSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterDetailSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitDetailSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetailSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DetailSectionContext detailSection() {
		DetailSectionContext _localctx = new DetailSectionContext(Context, State);
		EnterRule(_localctx, 8, RULE_detailSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			keyValuePair();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(TurbineParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairContext keyValuePair() {
		KeyValuePairContext _localctx = new KeyValuePairContext(Context, State);
		EnterRule(_localctx, 10, RULE_keyValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			key();
			State = 44;
			Match(COLON);
			State = 45;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 12, RULE_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TurbineParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TurbineParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TurbineParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(TurbineParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(TurbineParser.TIME, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 14, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 20224L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SitePositionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(TurbineParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(TurbineParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(TurbineParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(TurbineParser.TEXT, i);
		}
		public SitePositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sitePosition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.EnterSitePosition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITurbineListener typedListener = listener as ITurbineListener;
			if (typedListener != null) typedListener.ExitSitePosition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITurbineVisitor<TResult> typedVisitor = visitor as ITurbineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSitePosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SitePositionContext sitePosition() {
		SitePositionContext _localctx = new SitePositionContext(Context, State);
		EnterRule(_localctx, 16, RULE_sitePosition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(T__4);
			State = 52;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 53;
			Match(T__5);
			State = 54;
			Match(T__6);
			State = 55;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,16,58,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,1,0,5,0,20,8,0,10,0,12,0,23,9,0,1,1,1,1,1,1,1,1,1,2,1,2,1,
		2,1,2,1,3,1,3,5,3,35,8,3,10,3,12,3,38,9,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,
		1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,0,0,9,0,2,4,6,8,10,12,
		14,16,0,3,2,0,8,8,14,14,2,0,8,11,14,14,2,0,9,9,14,14,50,0,21,1,0,0,0,2,
		24,1,0,0,0,4,28,1,0,0,0,6,32,1,0,0,0,8,41,1,0,0,0,10,43,1,0,0,0,12,47,
		1,0,0,0,14,49,1,0,0,0,16,51,1,0,0,0,18,20,3,2,1,0,19,18,1,0,0,0,20,23,
		1,0,0,0,21,19,1,0,0,0,21,22,1,0,0,0,22,1,1,0,0,0,23,21,1,0,0,0,24,25,5,
		1,0,0,25,26,3,4,2,0,26,27,3,6,3,0,27,3,1,0,0,0,28,29,7,0,0,0,29,30,5,2,
		0,0,30,31,3,16,8,0,31,5,1,0,0,0,32,36,5,3,0,0,33,35,3,8,4,0,34,33,1,0,
		0,0,35,38,1,0,0,0,36,34,1,0,0,0,36,37,1,0,0,0,37,39,1,0,0,0,38,36,1,0,
		0,0,39,40,5,4,0,0,40,7,1,0,0,0,41,42,3,10,5,0,42,9,1,0,0,0,43,44,3,12,
		6,0,44,45,5,13,0,0,45,46,3,14,7,0,46,11,1,0,0,0,47,48,5,14,0,0,48,13,1,
		0,0,0,49,50,7,1,0,0,50,15,1,0,0,0,51,52,5,5,0,0,52,53,7,2,0,0,53,54,5,
		6,0,0,54,55,5,7,0,0,55,56,7,2,0,0,56,17,1,0,0,0,2,21,36
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
